#!/usr/bin/env python
# -*- coding: utf-8 -*-
PACKAGE = "supervisor"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


timer_periods = gen.add_group("timer_periods")
timer_periods.add("period_parser", 			double_t, 0, "Период обработки данных с UDP порта[сек]", 0.05, 0.01, 2)
timer_periods.add("period_leak", 			double_t, 0, "Период публикации данных датчика протечки[сек]", 0.1, 0.01, 2)
timer_periods.add("period_compensator", 	double_t, 0, "Период публикации данных компенсатора[сек]", 0.1, 0.01, 2)
timer_periods.add("period_devices_status", 	double_t, 0, "Период публикации данных состояния устройств[сек]", 0.1, 0.01, 2)
timer_periods.add("period_short_circuit", 	double_t, 0, "Период публикации данных короткого замыкания[сек]", 0.1, 0.01, 2)
timer_periods.add("period_adc", 			double_t, 0, "Период публикации данных внутреннего АЦП[сек]", 0.1, 0.01, 2)
timer_periods.add("period_external_adc", 	double_t, 0, "Период публикации данных внешнего АЦП[сек]", 0.1, 0.01, 2)
timer_periods.add("period_depth", 			double_t, 0, "Период публикации данных глубины[сек]", 0.1, 0.01, 2)
timer_periods.add("period_power_supply", 	double_t, 0, "Период публикации данных состояния питания[сек]", 0.1, 0.01, 2)
timer_periods.add("period_temperature", 	double_t, 0, "Период публикации данных температуры[сек]", 0.1, 0.01, 2)

timer_periods.add("period_water_check", 	double_t, 0, "Период обновления данных о наличии аппарата в воде[сек]", 0.1, 0.01, 2)
timer_periods.add("period_heartbeat",       double_t, 0, "Период обновления связи по ethernet[сек]", 0.1, 0.01, 2)

timeouts = gen.add_group("timeouts")
timeouts.add("timeout_old_data",        double_t, 0, "Таймаут после которого данные считаются устаревшими [сек]", 0.1, 0.01, 5)

exit(gen.generate(PACKAGE, "supervisor", "SupervisorPeriods"))